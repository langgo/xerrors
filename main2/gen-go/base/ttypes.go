// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package base

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type ThriftAny struct {
	TypeUrl string `thrift:"TypeUrl,1" json:"TypeUrl"`
	Value   []byte `thrift:"Value,2" json:"Value"`
}

func NewThriftAny() *ThriftAny {
	return &ThriftAny{
		Value: []byte(""),
	}
}

func (p *ThriftAny) GetTypeUrl() string {
	return p.TypeUrl
}

func (p *ThriftAny) GetValue() []byte {
	return p.Value
}
func (p *ThriftAny) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ThriftAny) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TypeUrl = v
	}
	return nil
}

func (p *ThriftAny) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *ThriftAny) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ThriftAny"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ThriftAny) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TypeUrl", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:TypeUrl: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TypeUrl)); err != nil {
		return fmt.Errorf("%T.TypeUrl (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:TypeUrl: %s", p, err)
	}
	return err
}

func (p *ThriftAny) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Value", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Value: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Value); err != nil {
		return fmt.Errorf("%T.Value (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Value: %s", p, err)
	}
	return err
}

func (p *ThriftAny) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftAny(%+v)", *p)
}

type User4 struct {
	Name  string     `thrift:"Name,1" json:"Name"`
	Value *ThriftAny `thrift:"Value,2" json:"Value"`
}

func NewUser4() *User4 {
	return &User4{}
}

func (p *User4) GetName() string {
	return p.Name
}

var User4_Value_DEFAULT *ThriftAny

func (p *User4) GetValue() *ThriftAny {
	if !p.IsSetValue() {
		return User4_Value_DEFAULT
	}
	return p.Value
}
func (p *User4) IsSetValue() bool {
	return p.Value != nil
}

func (p *User4) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *User4) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *User4) ReadField2(iprot thrift.TProtocol) error {
	p.Value = &ThriftAny{
		Value: []byte(""),
	}
	if err := p.Value.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Value, err)
	}
	return nil
}

func (p *User4) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("User4"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *User4) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.Name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Name: %s", p, err)
	}
	return err
}

func (p *User4) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Value", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Value: %s", p, err)
	}
	if err := p.Value.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Value, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Value: %s", p, err)
	}
	return err
}

func (p *User4) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User4(%+v)", *p)
}
